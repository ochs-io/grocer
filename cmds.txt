python3 -m startproject mysite
python3 manage.py runserver

"""
The migrate command looks at the INSTALLED_APPS setting and creates any necessary database tables according to the database settings in your mysite/settings.py file and the database migrations shipped with the app (weâ€™ll cover those later). Youâ€™ll see a message for each migration it applies. If youâ€™re interested, run the command-line client for your database and type \dt (PostgreSQL), SHOW TABLES; (MariaDB, MySQL), .tables (SQLite), or SELECT TABLE_NAME FROM USER_TABLES; (Oracle) to display the tables Django created.:w

For the minimalists:
Like we said above, the default applications (settings.py) are included for the common case, but not everybody needs them. If you donâ€™t need any or all of them, feel free to comment-out or delete the appropriate line(s) from INSTALLED_APPS before running migrate. The migrate command will only run migrations for apps in INSTALLED_APPS.
"""
python3 manage.py migrate

"""
Now Django knows to include the polls app (via INSTALLED_APPS in mysite/settings.py). Letâ€™s run another command:
"""
python3 manage.py makemigrations polls


"""

By running makemigrations, youâ€™re telling Django that youâ€™ve made some changes to your models (in this case, youâ€™ve made new ones) and that youâ€™d like the changes to be stored as a migration.

Migrations are how Django stores changes to your models (and thus your database schema) - theyâ€™re files on disk. You can read the migration for your new model if you like; itâ€™s the file polls/migrations/0001_initial.py. Donâ€™t worry, youâ€™re not expected to read them every time Django makes one, but theyâ€™re designed to be human-editable in case you want to manually tweak how Django changes things.

Thereâ€™s a command that will run the migrations for you and manage your database schema automatically - thatâ€™s called migrate, and weâ€™ll come to it in a moment - but first, letâ€™s see what SQL that migration would run. The sqlmigrate command takes migration names and returns their SQL:

"""
$ python manage.py sqlmigrate polls 0001 # RETURNS the SQL for a migration -- Postgres, MySql, or SQlite

# Itâ€™s tailored to the database youâ€™re using, so database-specific field types such as auto_increment (MySQL), serial (PostgreSQL), or integer primary key autoincrement (SQLite) are handled for you automatically. Same goes for the quoting of field names â€“ e.g., using double quotes or single quotes.
# If youâ€™re interested, you can also run python manage.py check; this checks for any problems in your project without making migrations or touching the database.

"""
Now, run migrate again to create those model tables in your database:
"""
python3 manage.py migrate # tracks using django_migrations table

"""
Migrations are very powerful and let you change your models over time, as you develop your project, without the need to delete your database or tables and make new ones - it specializes in upgrading your database live, without losing data. Weâ€™ll cover them in more depth in a later part of the tutorial, but for now, remember the three-step guide to making model changes:

    Change your models (in models.py).
    Run python manage.py makemigrations to create migrations for those changes
    Run python manage.py migrate to apply those changes to the database.

"""

Now, letâ€™s hop into the interactive Python shell and play around with the free API Django gives you. To invoke the Python shell, use this command:
python3 manage.py shell

>>> from polls.models import Choice, Question  # Import the model classes we just wrote.

# No questions are in the system yet.
>>> Question.objects.all()
<QuerySet []>

# Create a new Question.
# Support for time zones is enabled in the default settings file, so
# Django expects a datetime with tzinfo for pub_date. Use timezone.now()
# instead of datetime.datetime.now() and it will do the right thing.
>>> from django.utils import timezone
>>> q = Question(question_text="What's new?", pub_date=timezone.now())

# Save the object into the database. You have to call save() explicitly.
>>> q.save()

# Now it has an ID.
>>> q.id
1

# Access model field values via Python attributes.
>>> q.question_text
"What's new?"
>>> q.pub_date
datetime.datetime(2012, 2, 26, 13, 0, 0, 775217, tzinfo=<UTC>)

# Change values by changing the attributes, then calling save().
>>> q.question_text = "What's up?"
>>> q.save()

# objects.all() displays all the questions in the database.
>>> Question.objects.all()
<QuerySet [<Question: Question object (1)>]>

"""
Now we added the __str__ and was_published_recently functions to models.py
"""

>>> from polls.models import Choice, Question

# Make sure our __str__() addition worked.
>>> Question.objects.all()
<QuerySet [<Question: What's up?>]>

# Django provides a rich database lookup API that's entirely driven by
# keyword arguments.
>>> Question.objects.filter(id=1)
<QuerySet [<Question: What's up?>]>
>>> Question.objects.filter(question_text__startswith='What')
<QuerySet [<Question: What's up?>]>

# Get the question that was published this year.
>>> from django.utils import timezone
>>> current_year = timezone.now().year
>>> Question.objects.get(pub_date__year=current_year)
<Question: What's up?>

# Request an ID that doesn't exist, this will raise an exception.
>>> Question.objects.get(id=2)
Traceback (most recent call last):
    ...
DoesNotExist: Question matching query does not exist.

# Lookup by a primary key is the most common case, so Django provides a
# shortcut for primary-key exact lookups.
# The following is identical to Question.objects.get(id=1).
>>> Question.objects.get(pk=1)
<Question: What's up?>

# Make sure our custom method worked.
>>> q = Question.objects.get(pk=1)
>>> q.was_published_recently()
True

# Give the Question a couple of Choices. The create call constructs a new
# Choice object, does the INSERT statement, adds the choice to the set
# of available choices and returns the new Choice object. Django creates
# a set to hold the "other side" of a ForeignKey relation
# (e.g. a question's choice) which can be accessed via the API.
>>> q = Question.objects.get(pk=1)

# Display any choices from the related object set -- none so far.
>>> q.choice_set.all() # "choice_set" is the django term for relations
<QuerySet []>

# Create three choices.
>>> q.choice_set.create(choice_text='Not much', votes=0)
<Choice: Not much>
>>> q.choice_set.create(choice_text='The sky', votes=0)
<Choice: The sky>
>>> c = q.choice_set.create(choice_text='Just hacking again', votes=0)

# Choice objects have API access to their related Question objects.
>>> c.question
<Question: What's up?>

# And vice versa: Question objects get access to Choice objects.
>>> q.choice_set.all()
<QuerySet [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]>
>>> q.choice_set.count()
3

# The API automatically follows relationships as far as you need.
# Use double underscores to separate relationships.
# This works as many levels deep as you want; there's no limit.
# Find all Choices for any question whose pub_date is in this year
# (reusing the 'current_year' variable we created above).
>>> Choice.objects.filter(question__pub_date__year=current_year)
<QuerySet [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]>

# Let's delete one of the choices. Use delete() for that.
>>> c = q.choice_set.filter(choice_text__startswith='Just hacking')
>>> c.delete()


"""
More docs on relations: https://docs.djangoproject.com/en/4.1/ref/models/relations/
"""



### Introducing the Django admin

python manage.py createsuperuser